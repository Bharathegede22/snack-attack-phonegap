:ruby
	cars = Cargroup.live(@city)
	tmp = nil
	locs = []
	@locations = {}
	Location.live(@city).each do |l|
		@locations[l.id.to_s] = l
	end
.static
	%h1
		= @city.h1
	.attraction
		.right
			%h2 Which Cars in #{@city.name}
			#CarsPanel.panel-group
				- cars.each do |cg|
					- if !tmp.nil? && tmp.id != cg.id
						- cls = (tmp == cars.first) ? 'panel-collapse collapse in' : 'panel-collapse collapse'
						= render :partial => "/main/city_cars", locals: {tmp: tmp, locs: locs, cls: cls}
					:ruby
						if !tmp || tmp.id != cg.id
							locs = [[cg.l_name.split(',').last, cg.l_id, cg.total]]
						else
							locs << [cg.l_name.split(',').last, cg.l_id, cg.total]
						end
						tmp = cg
				- cls = 'panel-collapse collapse'
				= render :partial => "/main/city_cars", locals: {tmp: tmp, locs: locs, cls: cls}
				%br/
			%br/
		.left
			%h2 Where in #{@city.name}
			#Gmap.map{style: 'height: 600px;'}
			%br/
			= link_to "Explore " + @city.name, "/#{CommonHelper.escape(@city.link_name.downcase)}/explore"
			%br/
			= link_to "Beyond " + @city.name, "/#{CommonHelper.escape(@city.link_name.downcase)}/nearby"
		.fc
= javascript_tag do
	:plain
		function initializeMap() {
			var myLatlng = new google.maps.LatLng(#{@city.lat}, #{@city.lng});
			var mapOptions = {
				center: myLatlng,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			}
			var map = new google.maps.Map(document.getElementById("Gmap"), mapOptions);
			bounds = new google.maps.LatLngBounds ();
			bounds.extend (myLatlng);
	- Location.live(@city).each do |a|
		:plain
			var infowindow#{a.id} = new google.maps.InfoWindow({
				content: "#{a.mapcontent}"
			});
			var myLatlng#{a.id} = new google.maps.LatLng(#{a.lat}, #{a.lng});
			bounds.extend (myLatlng#{a.id});
			var marker#{a.id} = new google.maps.Marker({
				position: myLatlng#{a.id},
				map: map,
				animation: google.maps.Animation.DROP,
				title:"#{a.shortname}",
				icon:"#{asset_path 'map/zoom.png'}"
			});
			google.maps.event.addListener(marker#{a.id}, 'click', function() {
				infowindow#{a.id}.open(map,marker#{a.id});
			});
	:plain
			google.maps.event.addListenerOnce(map, 'idle', function() {
				google.maps.event.trigger(map, 'resize');
				map.fitBounds(bounds);
			});
		}
		function checkJquery() {
			if (window.jQuery) {
				var script = document.createElement("script");
				script.type = "text/javascript";
				script.src = "http://maps.googleapis.com/maps/api/js?key=#{GOOGLE_MAP_KEY}&sensor=true&callback=initializeMap";
				document.body.appendChild(script);
			} else {
				window.setTimeout(checkJquery, 1000);
			}
		}
		checkJquery();
